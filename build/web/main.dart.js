// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const html = dart_sdk.html;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const scaffold = flutter_sdk.src__material__scaffold;
  const snack_bar = flutter_sdk.src__material__snack_bar;
  const text = flutter_sdk.src__widgets__text;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const app_bar = flutter_sdk.src__material__app_bar;
  const basic = flutter_sdk.src__widgets__basic;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const flex = flutter_sdk.src__rendering__flex;
  const text_style = flutter_sdk.src__painting__text_style;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const wrap = flutter_sdk.src__rendering__wrap;
  const dialog = flutter_sdk.src__material__dialog;
  const text_button = flutter_sdk.src__material__text_button;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const list_tile = flutter_sdk.src__material__list_tile;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var $toString = dartx.toString;
  var $trim = dartx.trim;
  var $isEmpty = dartx.isEmpty;
  var $add = dartx.add;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $take = dartx.take;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $keys = dartx.keys;
  var $containsKey = dartx.containsKey;
  var $cast = dartx.cast;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $addAll = dartx.addAll;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $map = dartx.map;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $where = dartx.where;
  var $removeWhere = dartx.removeWhere;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToSelectSticksScreen: () => (T.BuildContextToSelectSticksScreen = dart.constFn(dart.fnType(main.SelectSticksScreen, [framework.BuildContext])))(),
    BuildContextToScoreScreen: () => (T.BuildContextToScoreScreen = dart.constFn(dart.fnType(main.ScoreScreen, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    ListOfWidget: () => (T.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    BuildContextToGameScreen: () => (T.BuildContextToGameScreen = dart.constFn(dart.fnType(main.GameScreen, [framework.BuildContext])))(),
    intToPadding: () => (T.intToPadding = dart.constFn(dart.fnType(basic.Padding, [core.int])))(),
    BuildContextToAlertDialog: () => (T.BuildContextToAlertDialog = dart.constFn(dart.fnType(dialog.AlertDialog, [framework.BuildContext])))(),
    BuildContextToInitialScreen: () => (T.BuildContextToInitialScreen = dart.constFn(dart.fnType(main.InitialScreen, [framework.BuildContext])))(),
    JSArrayOfPlayerScore: () => (T.JSArrayOfPlayerScore = dart.constFn(_interceptors.JSArray$(main.PlayerScore)))(),
    PlayerScoreAndPlayerScoreToint: () => (T.PlayerScoreAndPlayerScoreToint = dart.constFn(dart.fnType(core.int, [main.PlayerScore, main.PlayerScore])))(),
    BuildContextAndintToListTile: () => (T.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))(),
    CompleterOfSharedPreferences: () => (T.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    MapEntryOfString$Object: () => (T.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T.MapEntryOfString$Object(), [core.String, core.Object])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    LinkedHashMapOfString$Object: () => (T.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[6] || CT.C6
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[5] || CT.C5,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.NimGame = class NimGame extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Jogo NIM", debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.purple}), home: new main.InitialScreen.new()});
    }
    static ['_#new#tearOff']() {
      return new main.NimGame.new();
    }
  };
  (main.NimGame.new = function() {
    main.NimGame.__proto__.new.call(this);
    ;
  }).prototype = main.NimGame.prototype;
  dart.addTypeTests(main.NimGame);
  dart.addTypeCaches(main.NimGame);
  dart.setMethodSignature(main.NimGame, () => ({
    __proto__: dart.getMethods(main.NimGame.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.NimGame, I[0]);
  main.InitialScreen = class InitialScreen extends framework.StatefulWidget {
    createState() {
      return new main._InitialScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new main.InitialScreen.new();
    }
  };
  (main.InitialScreen.new = function() {
    main.InitialScreen.__proto__.new.call(this);
    ;
  }).prototype = main.InitialScreen.prototype;
  dart.addTypeTests(main.InitialScreen);
  dart.addTypeCaches(main.InitialScreen);
  dart.setMethodSignature(main.InitialScreen, () => ({
    __proto__: dart.getMethods(main.InitialScreen.__proto__),
    createState: dart.fnType(main._InitialScreenState, [])
  }));
  dart.setLibraryUri(main.InitialScreen, I[0]);
  var _controller = dart.privateName(main, "_controller");
  var _saveName = dart.privateName(main, "_saveName");
  var _navigateToScores = dart.privateName(main, "_navigateToScores");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  main._InitialScreenState = class _InitialScreenState extends framework.State$(main.InitialScreen) {
    [_saveName]() {
      return async.async(dart.void, (function* _saveName() {
        let name = this[_controller].text[$trim]();
        if (name[$isEmpty]) {
          scaffold.ScaffoldMessenger.of(this.context).showSnackBar(new snack_bar.SnackBar.new({content: new text.Text.new("Por favor, insira seu nome.")}));
          return;
        }
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        yield prefs.setString("playerName", name);
        navigator.Navigator.pushReplacement(dart.dynamic, T.ObjectN(), this.context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.SelectSticksScreen.new(), T.BuildContextToSelectSticksScreen())}));
      }).bind(this));
    }
    [_navigateToScores]() {
      return async.async(dart.void, (function* _navigateToScores() {
        navigator.Navigator.push(dart.dynamic, this.context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.ScoreScreen.new(), T.BuildContextToScoreScreen())}));
      }).bind(this));
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Jogo NIM")}), body: new basic.Padding.new({padding: C[1] || CT.C1, child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new text.Text.new("Digite seu nome para começar:", {style: new text_style.TextStyle.new({fontSize: 18, fontWeight: ui.FontWeight.bold})}), new text_field.TextField.new({controller: this[_controller], decoration: new input_decorator.InputDecoration.new({hintText: "Nome do Jogador"})}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _saveName), child: new text.Text.new("Iniciar Jogo")}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _navigateToScores), child: new text.Text.new("Ver Placar Geral")})])})})});
    }
    static ['_#new#tearOff']() {
      return new main._InitialScreenState.new();
    }
  };
  (main._InitialScreenState.new = function() {
    this[_controller] = new editable_text.TextEditingController.new();
    main._InitialScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._InitialScreenState.prototype;
  dart.addTypeTests(main._InitialScreenState);
  dart.addTypeCaches(main._InitialScreenState);
  dart.setMethodSignature(main._InitialScreenState, () => ({
    __proto__: dart.getMethods(main._InitialScreenState.__proto__),
    [_saveName]: dart.fnType(async.Future$(dart.void), []),
    [_navigateToScores]: dart.fnType(async.Future$(dart.void), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._InitialScreenState, I[0]);
  dart.setFieldSignature(main._InitialScreenState, () => ({
    __proto__: dart.getFields(main._InitialScreenState.__proto__),
    [_controller]: dart.finalFieldType(editable_text.TextEditingController)
  }));
  main.SelectSticksScreen = class SelectSticksScreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Escolha os Palitos")}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new text.Text.new("Quantos palitos você vai começar?", {style: new text_style.TextStyle.new({fontSize: 18, fontWeight: ui.FontWeight.bold})}), new basic.SizedBox.new({height: 20}), new basic.Wrap.new({alignment: wrap.WrapAlignment.center, children: T.ListOfWidget().generate(7, dart.fn(index => {
                  let stickCount = index + 7;
                  return new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                        navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.GameScreen.new({sticks: stickCount}), T.BuildContextToGameScreen())}));
                      }, T.VoidTovoid()), child: new text.Text.new(dart.str(stickCount))})});
                }, T.intToPadding()))})])})})});
    }
    static ['_#new#tearOff']() {
      return new main.SelectSticksScreen.new();
    }
  };
  (main.SelectSticksScreen.new = function() {
    main.SelectSticksScreen.__proto__.new.call(this);
    ;
  }).prototype = main.SelectSticksScreen.prototype;
  dart.addTypeTests(main.SelectSticksScreen);
  dart.addTypeCaches(main.SelectSticksScreen);
  dart.setMethodSignature(main.SelectSticksScreen, () => ({
    __proto__: dart.getMethods(main.SelectSticksScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.SelectSticksScreen, I[0]);
  var sticks$ = dart.privateName(main, "GameScreen.sticks");
  main.GameScreen = class GameScreen extends framework.StatefulWidget {
    get sticks() {
      return this[sticks$];
    }
    set sticks(value) {
      super.sticks = value;
    }
    static ['_#new#tearOff'](opts) {
      let sticks = opts && 'sticks' in opts ? opts.sticks : null;
      return new main.GameScreen.new({sticks: sticks});
    }
    createState() {
      return new main._GameScreenState.new();
    }
  };
  (main.GameScreen.new = function(opts) {
    let sticks = opts && 'sticks' in opts ? opts.sticks : null;
    this[sticks$] = sticks;
    main.GameScreen.__proto__.new.call(this);
    ;
  }).prototype = main.GameScreen.prototype;
  dart.addTypeTests(main.GameScreen);
  dart.addTypeCaches(main.GameScreen);
  dart.setMethodSignature(main.GameScreen, () => ({
    __proto__: dart.getMethods(main.GameScreen.__proto__),
    createState: dart.fnType(main._GameScreenState, [])
  }));
  dart.setLibraryUri(main.GameScreen, I[0]);
  dart.setFieldSignature(main.GameScreen, () => ({
    __proto__: dart.getFields(main.GameScreen.__proto__),
    sticks: dart.finalFieldType(core.int)
  }));
  var ___GameScreenState_remainingSticks = dart.privateName(main, "_#_GameScreenState#remainingSticks");
  var ___GameScreenState_playerWins = dart.privateName(main, "_#_GameScreenState#playerWins");
  var ___GameScreenState_computerWins = dart.privateName(main, "_#_GameScreenState#computerWins");
  var _loadData = dart.privateName(main, "_loadData");
  var _updateScore = dart.privateName(main, "_updateScore");
  var _showResult = dart.privateName(main, "_showResult");
  var _calculateComputerTake = dart.privateName(main, "_calculateComputerTake");
  var _takeSticks = dart.privateName(main, "_takeSticks");
  var _showReturnButton = dart.privateName(main, "_showReturnButton");
  main._GameScreenState = class _GameScreenState extends framework.State$(main.GameScreen) {
    get remainingSticks() {
      let t0;
      t0 = this[___GameScreenState_remainingSticks];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("remainingSticks")) : t0;
    }
    set remainingSticks(remainingSticks$35param) {
      this[___GameScreenState_remainingSticks] = remainingSticks$35param;
    }
    get playerWins() {
      let t0;
      t0 = this[___GameScreenState_playerWins];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("playerWins")) : t0;
    }
    set playerWins(playerWins$35param) {
      this[___GameScreenState_playerWins] = playerWins$35param;
    }
    get computerWins() {
      let t0;
      t0 = this[___GameScreenState_computerWins];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("computerWins")) : t0;
    }
    set computerWins(computerWins$35param) {
      this[___GameScreenState_computerWins] = computerWins$35param;
    }
    initState() {
      super.initState();
      this.remainingSticks = this.widget.sticks;
      this.playerWins = 0;
      this.computerWins = 0;
      this[_loadData]();
    }
    [_loadData]() {
      return async.async(dart.void, (function* _loadData() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        this.setState(dart.fn(() => {
          let t0, t0$, t0$0;
          this.playerName = (t0 = prefs.getString("playerName"), t0 == null ? "Jogador" : t0);
          this.playerWins = (t0$ = prefs.getInt("playerWins_" + this.playerName), t0$ == null ? 0 : t0$);
          this.computerWins = (t0$0 = prefs.getInt("computerWins"), t0$0 == null ? 0 : t0$0);
        }, T.VoidTovoid()));
      }).bind(this));
    }
    [_updateScore](winner) {
      return async.async(dart.void, (function* _updateScore() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        if (winner === "player") {
          this.playerWins = this.playerWins + 1;
          yield prefs.setInt("playerWins_" + this.playerName, this.playerWins);
        } else {
          this.computerWins = this.computerWins + 1;
          yield prefs.setInt("computerWins", this.computerWins);
        }
      }).bind(this));
    }
    [_takeSticks](taken) {
      this.setState(dart.fn(() => {
        this.remainingSticks = this.remainingSticks - taken;
        if (this.remainingSticks < 0) {
          this.remainingSticks = 0;
        }
        if (this.remainingSticks === 0) {
          this[_showResult]("Você venceu!");
          this[_updateScore]("player");
        } else {
          let computerTake = this[_calculateComputerTake](this.remainingSticks);
          this.remainingSticks = this.remainingSticks - computerTake;
          if (this.remainingSticks < 0) {
            this.remainingSticks = 0;
          }
          scaffold.ScaffoldMessenger.of(this.context).showSnackBar(new snack_bar.SnackBar.new({content: new text.Text.new("Computador retirou " + dart.str(computerTake) + " palitos")}));
          if (this.remainingSticks === 0) {
            this[_showResult]("Computador venceu!");
            this[_updateScore]("computer");
          }
        }
      }, T.VoidTovoid()));
    }
    [_calculateComputerTake](remaining) {
      if (remaining <= 0) return 0;
      return remaining >= 3 ? 3 : remaining;
    }
    [_showResult](result) {
      dialog.showDialog(dart.dynamic, {context: this.context, builder: dart.fn(context => new dialog.AlertDialog.new({title: new text.Text.new(result), content: new text.Text.new("Palitos restantes: " + dart.str(this.remainingSticks) + "\nVitórias dos Jogadores: " + dart.str(this.playerWins) + "\nVitórias do Computador: " + dart.str(this.computerWins)), actions: T.JSArrayOfWidget().of([new text_button.TextButton.new({onPressed: dart.fn(() => {
                navigator.Navigator.of(context).pop(T.ObjectN());
              }, T.VoidTovoid()), child: new text.Text.new("OK")})])}), T.BuildContextToAlertDialog())}).then(core.Null, dart.fn(_ => {
        if (result === "Você venceu!" || result === "Computador venceu!") {
          this[_showReturnButton]();
        }
      }, T.dynamicToNull()));
    }
    [_showReturnButton]() {
      dialog.showDialog(dart.dynamic, {context: this.context, builder: dart.fn(context => new dialog.AlertDialog.new({title: new text.Text.new("Fim de Jogo"), content: new text.Text.new("Deseja voltar ao início ou escolher os palitos novamente?"), actions: T.JSArrayOfWidget().of([new text_button.TextButton.new({onPressed: dart.fn(() => {
                navigator.Navigator.of(context).pop(T.ObjectN());
                navigator.Navigator.pushReplacement(dart.dynamic, T.ObjectN(), context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.InitialScreen.new(), T.BuildContextToInitialScreen())}));
              }, T.VoidTovoid()), child: new text.Text.new("Voltar ao Início")}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                navigator.Navigator.of(context).pop(T.ObjectN());
                navigator.Navigator.pushReplacement(dart.dynamic, T.ObjectN(), context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.SelectSticksScreen.new(), T.BuildContextToSelectSticksScreen())}));
              }, T.VoidTovoid()), child: new text.Text.new("Escolher Palitos")})])}), T.BuildContextToAlertDialog())});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Jogo NIM")}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new text.Text.new("Palitos restantes: " + dart.str(this.remainingSticks), {style: new text_style.TextStyle.new({fontSize: 20, fontWeight: ui.FontWeight.bold})}), new basic.SizedBox.new({height: 10}), new text.Text.new("Vitórias dos Jogadores: " + dart.str(this.playerWins), {style: new text_style.TextStyle.new({fontSize: 16})}), new text.Text.new("Vitórias do Computador: " + dart.str(this.computerWins), {style: new text_style.TextStyle.new({fontSize: 16})}), new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.ListOfWidget().generate(3, dart.fn(index => new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                      this[_takeSticks](index + 1);
                    }, T.VoidTovoid()), child: new text.Text.new(dart.str(index + 1))})}), T.intToPadding()))})])})})});
    }
    static ['_#new#tearOff']() {
      return new main._GameScreenState.new();
    }
  };
  (main._GameScreenState.new = function() {
    this[___GameScreenState_remainingSticks] = null;
    this[___GameScreenState_playerWins] = null;
    this[___GameScreenState_computerWins] = null;
    this.playerName = "";
    main._GameScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._GameScreenState.prototype;
  dart.addTypeTests(main._GameScreenState);
  dart.addTypeCaches(main._GameScreenState);
  dart.setMethodSignature(main._GameScreenState, () => ({
    __proto__: dart.getMethods(main._GameScreenState.__proto__),
    [_loadData]: dart.fnType(async.Future$(dart.void), []),
    [_updateScore]: dart.fnType(async.Future$(dart.void), [core.String]),
    [_takeSticks]: dart.fnType(dart.void, [core.int]),
    [_calculateComputerTake]: dart.fnType(core.int, [core.int]),
    [_showResult]: dart.fnType(dart.void, [core.String]),
    [_showReturnButton]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(main._GameScreenState, () => ({
    __proto__: dart.getGetters(main._GameScreenState.__proto__),
    remainingSticks: core.int,
    playerWins: core.int,
    computerWins: core.int
  }));
  dart.setSetterSignature(main._GameScreenState, () => ({
    __proto__: dart.getSetters(main._GameScreenState.__proto__),
    remainingSticks: core.int,
    playerWins: core.int,
    computerWins: core.int
  }));
  dart.setLibraryUri(main._GameScreenState, I[0]);
  dart.setFieldSignature(main._GameScreenState, () => ({
    __proto__: dart.getFields(main._GameScreenState.__proto__),
    [___GameScreenState_remainingSticks]: dart.fieldType(dart.nullable(core.int)),
    [___GameScreenState_playerWins]: dart.fieldType(dart.nullable(core.int)),
    [___GameScreenState_computerWins]: dart.fieldType(dart.nullable(core.int)),
    playerName: dart.fieldType(core.String)
  }));
  main.ScoreScreen = class ScoreScreen extends framework.StatefulWidget {
    createState() {
      return new main._ScoreScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new main.ScoreScreen.new();
    }
  };
  (main.ScoreScreen.new = function() {
    main.ScoreScreen.__proto__.new.call(this);
    ;
  }).prototype = main.ScoreScreen.prototype;
  dart.addTypeTests(main.ScoreScreen);
  dart.addTypeCaches(main.ScoreScreen);
  dart.setMethodSignature(main.ScoreScreen, () => ({
    __proto__: dart.getMethods(main.ScoreScreen.__proto__),
    createState: dart.fnType(main._ScoreScreenState, [])
  }));
  dart.setLibraryUri(main.ScoreScreen, I[0]);
  var _loadScores = dart.privateName(main, "_loadScores");
  var _navigateToInitialScreen = dart.privateName(main, "_navigateToInitialScreen");
  main._ScoreScreenState = class _ScoreScreenState extends framework.State$(main.ScoreScreen) {
    [_loadScores]() {
      return async.async(dart.void, (function* _loadScores() {
        let t0;
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let scores = T.JSArrayOfPlayerScore().of([]);
        for (let i = 0; i < 5; i = i + 1) {
          let name = prefs.getString("playerName_" + dart.str(i));
          let score = (t0 = prefs.getInt("playerScore_" + dart.str(i)), t0 == null ? 0 : t0);
          if (name != null) {
            scores[$add](new main.PlayerScore.new({name: name, score: score}));
          }
        }
        scores[$sort](dart.fn((a, b) => b.score[$compareTo](a.score), T.PlayerScoreAndPlayerScoreToint()));
        this.setState(dart.fn(() => {
          this.topScores = scores[$take](5)[$toList]();
        }, T.VoidTovoid()));
      }).bind(this));
    }
    [_navigateToInitialScreen]() {
      navigator.Navigator.pop(T.ObjectN(), this.context);
    }
    initState() {
      super.initState();
      this[_loadScores]();
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Placar Geral")}), body: new basic.Column.new({children: T.JSArrayOfWidget().of([new basic.Expanded.new({child: new scroll_view.ListView.builder({itemCount: this.topScores[$length], itemBuilder: dart.fn((context, index) => new list_tile.ListTile.new({title: new text.Text.new(this.topScores[$_get](index).name), trailing: new text.Text.new(this.topScores[$_get](index).score[$toString]())}), T.BuildContextAndintToListTile())})}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _navigateToInitialScreen), child: new text.Text.new("Voltar ao Início")})])})});
    }
    static ['_#new#tearOff']() {
      return new main._ScoreScreenState.new();
    }
  };
  (main._ScoreScreenState.new = function() {
    this.topScores = T.JSArrayOfPlayerScore().of([]);
    main._ScoreScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._ScoreScreenState.prototype;
  dart.addTypeTests(main._ScoreScreenState);
  dart.addTypeCaches(main._ScoreScreenState);
  dart.setMethodSignature(main._ScoreScreenState, () => ({
    __proto__: dart.getMethods(main._ScoreScreenState.__proto__),
    [_loadScores]: dart.fnType(async.Future$(dart.void), []),
    [_navigateToInitialScreen]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._ScoreScreenState, I[0]);
  dart.setFieldSignature(main._ScoreScreenState, () => ({
    __proto__: dart.getFields(main._ScoreScreenState.__proto__),
    topScores: dart.fieldType(core.List$(main.PlayerScore))
  }));
  var name$ = dart.privateName(main, "PlayerScore.name");
  var score$ = dart.privateName(main, "PlayerScore.score");
  main.PlayerScore = class PlayerScore extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get score() {
      return this[score$];
    }
    set score(value) {
      super.score = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let score = opts && 'score' in opts ? opts.score : null;
      return new main.PlayerScore.new({name: name, score: score});
    }
  };
  (main.PlayerScore.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let score = opts && 'score' in opts ? opts.score : null;
    this[name$] = name;
    this[score$] = score;
    ;
  }).prototype = main.PlayerScore.prototype;
  dart.addTypeTests(main.PlayerScore);
  dart.addTypeCaches(main.PlayerScore);
  dart.setLibraryUri(main.PlayerScore, I[0]);
  dart.setFieldSignature(main.PlayerScore, () => ({
    __proto__: dart.getFields(main.PlayerScore.__proto__),
    name: dart.finalFieldType(core.String),
    score: dart.finalFieldType(core.int)
  }));
  main.main = function main$0() {
    binding.runApp(new main.NimGame.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t1;
      let list = T.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T.ListNOfString().as((t1 = list, t1 == null ? null : t1[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[1], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T.MapEntryOfString$Object()).__(newKey, value);
      }, T.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[2]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  var _getFilteredKeys = dart.privateName(shared_preferences_web, "_getFilteredKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[3], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[3] || CT.C3)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[4]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[5]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})[$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T.IdentityMapOfString$Object()).new();
        for (let key of this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[$localStorage][$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_getFilteredKeys](prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return html.window[$localStorage][$keys][$where](dart.fn(key => {
        let t3, t3$;
        return key[$startsWith](prefix) && dart.test((t3$ = (t3 = allowList, t3 == null ? null : t3.contains(key)), t3$ == null ? true : t3$));
      }, T.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[6]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        } else {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix), T.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T.LinkedHashMapOfString$Object().from(this[_data]);
        preferences[$removeWhere](dart.fn((key, _) => !key[$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[5]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var prefix$ = dart.privateName(types, "PreferencesFilter.prefix");
  var allowList$ = dart.privateName(types, "PreferencesFilter.allowList");
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get allowList() {
      return this[allowList$];
    }
    set allowList(value) {
      this[allowList$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let allowList = opts && 'allowList' in opts ? opts.allowList : null;
    this[prefix$] = prefix;
    this[allowList$] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[7]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  var filter$ = dart.privateName(types, "GetAllParameters.filter");
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[7]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var filter$0 = dart.privateName(types, "ClearParameters.filter");
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[filter$0];
    }
    set filter(value) {
      this[filter$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$0] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[7]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[4]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t3;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t3 = filter.allowList, t3 == null ? null : t3[$toList]())])));
      });
    }
    getAll() {
      return async.async(T.MapOfString$Object(), function* getAll() {
        let t3;
        t3 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t3 == null ? new (T.IdentityMapOfString$Object()).new() : t3;
      });
    }
    getAllWithPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), function* getAllWithParameters() {
        let t3, t3$;
        let filter = parameters.filter;
        let allowListAsList = (t3 = filter.allowList, t3 == null ? null : t3[$toList]());
        t3$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t3$ == null ? new (T.IdentityMapOfString$Object()).new() : t3$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[8]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[4] || CT.C4;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    shared_preferences: shared_preferences,
    shared_preferences_web: shared_preferences_web,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences
  };
}));

//# sourceMappingURL=main.js.map
